name: Publish Docker image with version
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ "**" ]
jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install and run pre-commit
        uses: pre-commit/action@v2.0.0
        with:
          extra_args: --all-files
  push_to_registries:
    needs:
      - lint
    name: Push Docker image to docker hub and github packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: Prepare
        id: prepare
        run: |
          function test_version() {
            curl -s -S "https://registry.hub.docker.com/v2/repositories/julianpsotta/ohsome-api/tags/?page_size=1024" |
              sed -e 's/,/,\n/g' -e 's/\[/\[\n/g' |
              grep '"name"' |
              awk -F\" '{print $4;}' |
              sort -fu
          }

          DOCKER_IMAGE=julianpsotta/ohsome-apiQ
          CURRENT_VERSIONS=$(test_version)
          DOCKER_VERSION=${GITHUB_REF#refs/*/}
          DOCKER_PLATFORMS=linux/amd64

          TAGS_VERSION="--tag ${DOCKER_IMAGE}:${DOCKER_VERSION}"
          TAGS_LATEST="--tag ${DOCKER_IMAGE}:latest"

          if [ $CURRENT_VERSIONS == *"$DOCKER_VERSION"* ] || [ "latest" != *"$DOCKER_VERSION"* ]; then
            echo "Version present or latest. Skipping it!"
            BUILD_VERSION=false
          else
            echo "Version not present and not latest. Building it!"
            BUILD_VERSION=true
          fi

          curl -o fallback.oshdb.mv.db http://downloads.ohsome.org/v0.6/europe/germany/baden-wuerttemberg/heidelberg_68900_2020-07-23.oshdb.mv.db

          echo ::set-output name=build_version::${BUILD_VERSION}
          echo ::set-output name=buildx_args_version::--platform ${DOCKER_PLATFORMS} \
                      --build-arg OHSOMEAPI_VERSION=${DOCKER_VERSION} \
                      --build-arg FALLBACK_DATA_FILE=fallback.oshdb.mv.db \
                      ${TAGS_VERSION} .
          echo ::set-output name=buildx_args_latest::--platform ${DOCKER_PLATFORMS} \
                      --build-arg OHSOMEAPI_VERSION=latest \
                      --build-arg FALLBACK_DATA_FILE=fallback.oshdb.mv.db \
                      ${TAGS_LATEST} .
      - name: Build version if not present
        if: ${{ steps.prepare.outputs.build_version == 'true' }}
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_version }}
      - name: Build latest
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_latest }}
      - name: Login to DockerHub
        if: success()
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Publish version if not present
        if: success() && ${{ steps.prepare.outputs.build_version == 'true' }}
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_version }}
      - name: Publish latest
        if: success()
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_latest }}
